#labels Featured
#sidebar APIDocumentation

<wiki:toc max_depth="1" />

= 简单介绍 =
AISpeech API `JavaScript` SDK，提供了录音，内核计算，结果处理的方法调用，减小了广大开发者开发语音应用的成本。

= 环境准备 = 
  # 请先准备一个Microphone
  # 浏览器： Firefox 3.5+, IE7+, Chrome 7+, Safari 5+
  # 网络环境： 此SDK客户端需要连接服务器1935端口，请确认您的网络设置没有屏蔽服务器1935端口。
  # [TechSupport 申请appKey]。

= 简单例子：中文单词评分 = 
  在这个例子中，我们开发一个中文单词评分的Demo。
   * 中文参考文本：你好，数字拼音表示为ni2-hao3。
   * 录音，对着Microphone说“你好”。
   * 查看结果，看看你说的“你好”是否标准。
  # 下载SDK。
  # 解压到 $WWWROOT$/aispeechapi-js。
  # 在$WWWROOT$/aispeechapi-js目录下建立一个html页面。 
  # html页面中导入load_core.js文件，这个文件定义了需要加载的JS资源：
 {{{
 <script type="text/javascript" src="load_core.js"></script>
}}}
   * load_core.js中有这样一行 window.aispeech.host = aispeech.host || _"http://127.0.0.1/aispeechapi-js"_; 请确认_"http://127.0.0.1/aispeechapi-js"_和你的部署路径一致，如果不是，请修改，以保证_"http://yourpath/load_core.js"_可访问。
  # 接下来，我们想要在页面中加入一个录音机组件，以便进行语音录制。首先要新建一个div作为容器，在body中加入一个div，此div是flash录音机的容器：
  {{{
<div id="aiRecorder1">
            <a href="http://www.adobe.com/go/getflashplayer">get flash player</a>
</div>
}}}
  # 有了div容器，我们需要通过JavaScript代码在页面注入一个录音机组件。很简单，只需要新建`AiRecorder`对象：
   * `AiRecorder`对象是`JavaScript`对Flash录音机的封装，提供了在页面注入flash，操作flash的功能。
   * 构造一个`AiRecorder`对象，
     * 参数 id， `AiRecorder`实例的id，和容器div的id相同。
     * 参数 flashRecorderUrl， flash 录音机swf文件地址。
     * 参数 serverList，服务器列表。
     * 回调 onFlashLoad， Flash加载事件回调。
     * 回调 onConnectorStatusChange，连接录音服务器的事件回调。
     * 回调 onMicStatusChange，Microphone事件回调。
     * 回调 onError，错误事件回调。
   * 代码：
{{{
     var serverList =  var serverList = ["rtmp://sandbox.api.aispeech.com/aistream.cnscore.v1.0"];
     window.recorder1 = new aispeech.AiRecorder({
            id: "aiRecorder1",     //此处id和容器div的id相同
            showFlash: true,    
            flashRecorderUrl: "../airecorder/AudioRecorder4JS_developer_20110211_beta1.swf",    // flash录音机的路径。
            expressInstallUrl: "../common/expressInstall.swf",  
            serverList: serverList,      //录音服务器列表 
            appKey: "1295337509549",
            secretKey: "391720efc00de450c56bbd7954171bc9af1b8ccf",
            onFlashLoad: function(code, message){ // flash加载完成回调

                aispeech.AiDebug.info("JS: onFlashLoad callback. code=" + code + ", message=" + JSON.stringify(message));

            },

            onConnectorStatusChange: function(code, message){ //连接服务器状态回调

                aispeech.AiDebug.info("JS: onConnectorStatusChange callback. code=" + code + ", message=" + JSON.stringify(message));

            },

            onMicStatusChange: function(code, message){   // Mic状态回调

                aispeech.AiDebug.info("JS: onMicStatusChange callback. code=" + code + ", message=" + JSON.stringify(message));

            },

            onError: function(code, message){      //错误回调

                aispeech.AiDebug.info("JS: onError callback. code=" + code + ", message=" + JSON.stringify(message));

            }
        });
       
 }}}
   * 注意：
     * 请确认swf地址正确。
     * 查看页面是否成功注入了flash对应的object节点。
  # 现在，你已经在页面添加了一个录音机组件，接下来你要添加一些操作按钮来控制录音机。增加一个开始录音按钮。对click添加处理函数。
   * 开始录音的时候，需要指定本次录音对应的计算参数。
   * 参数 duration，录音的时间长度，单位ms。
   * 参数 refText，本次录音对应的参考文本，可以硬编码为"ni2-hao3"。
   * 参数 serverParams，请求不同的语音服务内核，参数有所异同，具体请参考[ServiceList]中每个内核资源的说明。
   * 回调 onRecordIdGenerated，服务器为本次录音生成了唯一的文件id。
   * 回调 onStart， 录音开始事件。
   * 回调 onStop， 录音停止事件。
{{{
     function onStartRecordClick {
           var duration =  5000;  
           var refText = "ni2-hao3";   
            var r = recorder1.record({
                //recordId: recordId,
                duration: duration,       
                serverParams: {    
                    scoreType: 4,
                    coreType: "cn.word.score.v2.1",
                    refText: refText,
                    userId: "demo@domain.com",
                    applicationId: "firstapp"
                },
               onRecordIdGenerated: function(code, message){

                    aispeech.AiDebug.info("JS: onRecordIdGenerated. code=" + code + ", message=" + JSON.stringify(message));

                   
                },

                onStart: function(code, message){

                    aispeech.AiDebug.info("AS: recordStart callback. code=" + code + ", message=" + JSON.stringify(message));

                },

                onStop: function(code, message){

                    aispeech.AiDebug.info("AS: recordStop callback. code=" + code + ", message=" + JSON.stringify(message));

                }
            });

}
 }}}
  # 有了上面的过程，你就可以开始录音了。当录音时间达到duration指定的时间长度后会自动停止录音。你也可以增加一个结束录音按钮，以便手动停止录音，对按钮click事件添加处理函数：
{{{
function onStopRecordClick{
    
       recorder1.stop();
  
}
}}}
  # 现在你已经可以控制录音机开始录音和结束录音了。接下来需要获取语音评估结果，你可以调用getScores方法，
   * 返回值说明，参考[ServiceList]中不同语音内核的返回值。
   * 什么时候调用getScores？录音结束事件发生后可以调用getScores获取结果。
   * 代码：
{{{
  var lastRecordId = recorder1.getLastRecordId();  //获取最近一次的录音的ID
  recorder1.getScores({
                recordId: lastRecordId,            //根据recordId获取评分结果
               success: function(data){
                    aispeech.AiDebug.log("JS: getScores success.", data);
                }
            });
}}}
  # 如果你在上面的步骤遇到了困难，可以开启debug功能：
   * 在页面上包含一个log信息输出div:
{{{
<div id="aispeechAiDebug" class="aispeechAiDebug">

        </div>
}}}

= 高级功能 =
  # Mic设置
  # 录音回放
  # 音量控制
  # 中文字词类应用，绘制声调曲线
  # 调试日志输出
  * 更多功能请参考[UserGuide]
= 问题排查 =
 请参考[FAQ]